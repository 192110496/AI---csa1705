import heapq

class Node:
    def __init__(self, name, g=0, h=0, parent=None):
        self.name = name
        self.g = g
        self.h = h
        self.f = g + h
        self.parent = parent

    def __lt__(self, other):
        return self.f < other.f

def astar(graph, heuristics, start, goal):
    open_list = []
    closed_set = set()
    start_node = Node(start, g=0, h=heuristics[start])
    heapq.heappush(open_list, start_node)

    while open_list:
        current = heapq.heappop(open_list)
        if current.name == goal:
            path = []
            while current:
                path.append(current.name)
                current = current.parent
            return path[::-1]

        closed_set.add(current.name)
        for neighbor, cost in graph[current.name].items():
            if neighbor in closed_set:
                continue
            g = current.g + cost
            h = heuristics[neighbor]
            neighbor_node = Node(neighbor, g, h, current)
            heapq.heappush(open_list, neighbor_node)

    return None

graph = {
    'A': {'B': 1, 'C': 3},
    'B': {'A': 1, 'D': 3, 'E': 1},
    'C': {'A': 3, 'F': 5},
    'D': {'B': 3},
    'E': {'B': 1, 'F': 2},
    'F': {'C': 5, 'E': 2}
}

heuristics = {
    'A': 6,
    'B': 4,
    'C': 4,
    'D': 6,
    'E': 2,
    'F': 0
}

path = astar(graph, heuristics, 'A', 'F')
print("Path found:", path)
